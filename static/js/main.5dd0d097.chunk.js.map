{"version":3,"sources":["Components/FeedbackOptions/FeedbackOptions.module.css","Components/Seaction/Seaction.module.css","Components/Notification/Notification.module.css","Components/Statistics/Statistics.js","Components/FeedbackOptions/FeedbackOptions.js","Components/Seaction/Seaction.js","Components/Notification/Notification.js","App.js","reportWebVitals.js","index.js","Components/Statistics/Statistics.module.css"],"names":["module","exports","Statistics","this","props","good","neutral","bad","total","positivePercentage","className","s","text","Component","FeedbackOptions","options","onLeaveFeedback","map","option","name","onClick","button","Section","title","children","Notification","message","App","state","handleButtonClick","e","currentTarget","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","floor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,OAAS,kC,mBCA3BD,EAAOC,QAAU,CAAC,MAAQ,0B,mBCA1BD,EAAOC,QAAU,CAAC,QAAU,gC,qICyBbC,E,4JApBX,WACI,MAAwDC,KAAKC,MAArDC,EAAR,EAAQA,KAAKC,EAAb,EAAaA,QAAQC,EAArB,EAAqBA,IAAKC,EAA1B,EAA0BA,MAAOC,EAAjC,EAAiCA,mBACjC,OACI,qCACI,oBAAGC,UAAWC,IAAEC,KAAhB,mBAA6BP,KAC7B,oBAAGK,UAAWC,IAAEC,KAAhB,sBAAgCN,KAChC,oBAAGI,UAAWC,IAAEC,KAAhB,iBAA2BL,KAC3B,oBAAGG,UAAWC,IAAEC,KAAhB,mBAA6BJ,KAC7B,oBAAGE,UAAWC,IAAEC,KAAhB,gCAA0CH,EAA1C,c,GAVSI,a,iBCkBVC,E,4JAjBX,WACI,MAAqCX,KAAKC,MAAlCW,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,gBACjB,OACI,mCACKD,EAAQE,KAAI,SAAAC,GAEV,OAAQ,yBAAqBC,KAAMD,EAAQE,QAASJ,EAAiBN,UAAWC,IAAEU,OAA1E,cAAoFH,EAApF,MAAaA,Y,GAPVL,a,iBCafS,E,4JAbX,WACI,MAA6BnB,KAAKC,MAA1BmB,EAAR,EAAQA,MAAQC,EAAhB,EAAgBA,SAChB,OACI,oCACI,oBAAId,UAAWC,IAAEY,MAAjB,SAAyBA,IACxBC,S,GANKX,a,iBCaPY,E,4JAZX,WACI,IAAQC,EAAYvB,KAAKC,MAAjBsB,QACR,OACI,mCACI,mBAAGhB,UAAWC,IAAEe,QAAhB,SAA0BA,U,GALfb,aCuDZc,E,4MAjDZC,MAAM,CACJvB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPsB,kBAAoB,SAACC,GAClB,IAAQX,EAASW,EAAEC,cAAXZ,KAER,EAAKa,UAAS,SAAAC,GACX,OAAO,eAAGd,EAAQc,EAAUd,GAAQ,O,4CAM1C,WAEG,MAA+BhB,KAAKyB,MAA5BvB,EAAR,EAAQA,KACF6B,EAAqB7B,EAD3B,EAAcC,QAAd,EAAuBC,IAEjB4B,EAAkCC,KAAKC,MAAOhC,EAAO6B,EAAsB,KACjF,OACF,qCAEK,cAAC,EAAD,CAASX,MAAO,wBAAhB,SACG,cAAC,EAAD,CACGR,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBb,KAAK0B,sBAG5B,eAAC,EAAD,CAASN,MAAO,aAAhB,UACIW,EACK,cAAC,EAAD,CACM7B,KAAMF,KAAKyB,MAAMvB,KACjBC,QAASH,KAAKyB,MAAMtB,QACpBC,IAAKJ,KAAKyB,MAAMrB,IAChBC,MAAO0B,EACPzB,mBAAoB0B,IAEzB,KAEND,EAAqB,KAAO,cAAC,EAAD,CAAcR,QAAQ,gC,GA3C7Cb,aCKHyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCdAtC,EAAOC,QAAU,CAAC,KAAO,4B","file":"static/js/main.5dd0d097.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__2H74e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Seaction_title__3OTNC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__1jxlD\"};","import React, { Component } from 'react';\r\nimport s from './Statistics.module.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Statistics extends Component {\r\n\r\n    render() {\r\n        const { good,neutral,bad ,total ,positivePercentage } = this.props;\r\n        return (\r\n            <>\r\n                <p className={s.text}>Good: {good}</p>\r\n                <p className={s.text}>Neutral: {neutral}</p>\r\n                <p className={s.text}>Bad:{bad}</p>\r\n                <p className={s.text}>Total:{total}</p>\r\n                <p className={s.text}>Positive feedback: {positivePercentage}%</p>\r\n            </>\r\n        )\r\n    }\r\n}\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage:PropTypes.number.isRequired,\r\n}\r\nexport default Statistics;","import React, { Component } from 'react';\r\nimport s from './FeedbackOptions.module.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass FeedbackOptions extends Component {\r\n    render() {\r\n        const { options, onLeaveFeedback } = this.props;\r\n        return (\r\n            <>\r\n                {options.map(option => {\r\n                    \r\n                   return  <button key={option} name={option} onClick={onLeaveFeedback} className={s.button}> {option} </button>\r\n                })}\r\n            </>\r\n        )\r\n    }\r\n}\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.array.isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n    \r\n}\r\nexport default FeedbackOptions; ","import React, { Component } from 'react';\r\nimport s from './Seaction.module.css';\r\nimport PropTypes from \"prop-types\";\r\nclass Section extends Component {\r\n    render() {\r\n        const { title , children } = this.props;\r\n        return (\r\n            <section>\r\n                <h2 className={s.title}>{title}</h2>\r\n                {children}\r\n            </section>\r\n        )\r\n    }\r\n}\r\nSection.propTypes = {\r\n    title : PropTypes.string ,\r\n}\r\nexport default Section;","import React, { Component } from 'react';\r\nimport s from './Notification.module.css';\r\nimport PropTypes from \"prop-types\";\r\nclass Notification extends Component {\r\n    render() {\r\n        const { message } = this.props;\r\n        return (\r\n            <>\r\n                <p className={s.message}>{message}</p>\r\n            </>\r\n        )\r\n    }\r\n}\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n}\r\nexport default Notification;","\nimport React ,{Component} from 'react';\nimport Statistics from './Components/Statistics';\nimport FeedbackOptions from './Components/FeedbackOptions';\nimport Section from './Components/Seaction';\nimport Notification from './Components/Notification';\n\nclass App extends Component {\n\n   state={\n     good: 0,\n     neutral: 0,\n     bad: 0\n   }\n   \n   handleButtonClick = (e) => {\n      const { name } = e.currentTarget;\n      \n      this.setState(prevState => {\n         return { [name] : prevState[name] + 1 }\n      })\n        \n   }\n\n \n   render()\n   {\n      const { good, neutral, bad } = this.state;\n      const countTotalFeedback = good + neutral + bad;\n      const countPositiveFeedbackPercentage = Math.floor((good / countTotalFeedback) * 100);\n      return (\n    <>\n       \n         <Section title={'Please leave feedback'}>\n            <FeedbackOptions\n               options={['good', 'neutral', 'bad']}\n               onLeaveFeedback={this.handleButtonClick}\n            />\n         </Section>\n         <Section title={'Statistics'}>\n            {countTotalFeedback ? (\n                  <Statistics \n                        good={this.state.good}\n                        neutral={this.state.neutral}\n                        bad={this.state.bad}\n                        total={countTotalFeedback}\n                        positivePercentage={countPositiveFeedbackPercentage}\n                  />\n               ) : null}\n\n            {countTotalFeedback ? null : <Notification message=\"No feedback given\" />}\n         </Section> \n    </>\n    \n );\n }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Statistics_text__2ifxb\"};"],"sourceRoot":""}